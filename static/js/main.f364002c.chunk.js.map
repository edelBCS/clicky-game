{"version":3,"sources":["components/Container.js","components/ScoreBar.js","components/Jumbotron.js","components/Image.js","components/Row.js","components/Alert.js","App.js","serviceWorker.js","index.js"],"names":["Container","className","this","props","fluid","classprops","Component","ScoreBar","score","hiScore","Jumbotron","Image","src","imgSrc","alt","imgAlt","onClick","clickImg","id","Row","Alert","role","type","style","width","margin","marginTop","children","App","state","endScore","selectedImgs","gameover","clickImages","handleImgClick","find","imgId","endgame","setState","shuffle","newHiScore","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","images","map","image","imageURL","name","key","opacity","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f364002c.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nexport class Container extends Component {\n    render() {\n        return (\n            <div className={`container${this.props.fluid ? \"-fluid\" : \"\"} ${this.props.classprops}`} {...this.props} />\n        )\n    }\n}\n\nexport default Container\n","import React, { Component } from 'react'\nimport Container from \"./Container\"\n\nexport class ScoreBar extends Component {\n    render() {\n        return (\n            <div>\n                <nav className=\"navbar navbar-light bg-light shadow-sm\">\n                    <Container>\n                        <h3 className=\"col-4\">Clicky Game</h3>\n                        <h3 className=\"col-4\">Click an image to begin!</h3>\n                        <h3 className=\"col-4\">Score: {this.props.score} | Total Score: {this.props.hiScore}</h3>\n                    </Container>\n                </nav>\n            </div>\n        )\n    }\n}\n\nexport default ScoreBar\n","import React, { Component } from 'react'\n\nexport class Jumbotron extends Component {\n    render() {\n        return (\n            <div>\n                <div className=\"jumbotron jumbotron-fluid shadow-sm\">\n                    <div className=\"container text-center\">\n                        <h1 className=\"display-4\">Clicky Game</h1>\n                        <p className=\"lead\">Done click the same thing twice!!</p>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Jumbotron\n","import React, { Component } from 'react'\n\nexport class Image extends Component {\n    \n    render() {\n\n        return (\n            <div className=\"col-3 my-2\">\n                <img src={this.props.imgSrc} alt={this.props.imgAlt} className=\"img-thumbnail clickyImg\" onClick={() => this.props.clickImg(this.props.id)}></img>\n            </div>\n        )\n    }\n}\n\nexport default Image\n","import React, { Component } from 'react'\n\nexport class Row extends Component {\n    render() {\n        return (\n            <div className={`row${this.props.fluid ? \"-fluid\" : \"\"}`} {...this.props} />\n        )\n    }\n}\n\nexport default Row\n","import React from \"react\";\r\n\r\nfunction Alert(props) {\r\n  return (\r\n    <div\r\n      role=\"alert\"\r\n      className={`alert alert-${props.type} fade in`}\r\n      style={{ width: \"80%\", margin: \"0 auto\", marginTop: 18, ...props.style }}\r\n    >\r\n      {props.children}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Alert;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport clickImages from \"./clicky-images.json\";\nimport ScoreBar from \"./components/ScoreBar\";\nimport Jumbotron from \"./components/Jumbotron\";\nimport Image from \"./components/Image\";\nimport Container from './components/Container';\nimport Row from \"./components/Row\";\nimport Alert from \"./components/Alert\";\n\nexport class App extends Component {\n  state = {\n    score: 0,\n    hiScore: 0,\n    endScore: 0,\n    selectedImgs: [],\n    gameover: false,\n    clickImages\n  }\n\n  // When img is clicked, tests for endgame, otherwise updates state\n  handleImgClick = id => {\n    if (this.state.selectedImgs.find(imgId => imgId === id)) {\n      this.endgame(this.state.score);\n    } else {\n      this.setState({\n        score: this.state.score + 1,\n        selectedImgs: [...this.state.selectedImgs, id],\n        clickImages: this.shuffle(this.state.clickImages),\n        gameover: false\n      });\n    }    \n  };\n\n  // ends each game round and resets score\n  endgame = (score) => {\n    let newHiScore = (score > this.state.hiScore) ? score : this.state.hiScore;\n\n    this.setState({      \n      endScore: this.state.score,\n      score: 0,\n      hiScore: newHiScore,\n      gameover: true,\n      selectedImgs: []\n    });\n  };\n\n  // Randomizes the order of the images\n  shuffle = (array) => {\n    var currentIndex = array.length, temporaryValue, randomIndex;\n  \n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n  \n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n  \n      // And swap it with the current element.\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n  \n    return array;\n  }\n\n  render() {\n\n    // Displays an image for each object in the JSON data file\n    const images = this.state.clickImages.map(image => {\n      return <Image imgSrc={image.imageURL} imgAlt={image.name} id={image.id} key={image.id} clickImg={this.handleImgClick}/>;\n    });    \n    \n    return (\n      <div>\n        <div className=\"App\">\n          <ScoreBar score={this.state.score} hiScore={this.state.hiScore}/>\n          <Jumbotron />\n          <Container classprops=\"text-center display-4\">\n            <Alert style={{ opacity: this.state.gameover ? 1 : 0 }} type=\"success\">\n              Game Over. {(this.state.endScore === this.state.hiScore)?`New High Score: `: `Score: `}{this.state.endScore}\n            </Alert>\n          </Container>\n          <Container classprops=\"d-flex justify-content-center\">\n            <Row>\n              {this.shuffle(images)}\n            </Row>\n          </Container>          \n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}